networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:

services:
  postgres:
    image: postgres:18-alpine
    container_name: telegram_auth_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      
  redis:
    image: redis:8-alpine
    container_name: telegram_auth_redis
    ports:
      - "6379:6379"
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: telegram_auth_backend
    env_file: .env
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app-network

  frontend:
    build: ./frontend
    container_name: telegram_auth_frontend
    ports:
      - "5173:80" 
    environment:
      - CHOKIDAR_USEPOLLING=true 
    networks:
      - app-network
    depends_on:
      - backend
